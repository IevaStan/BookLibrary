1. Sukurti registracijos formą.+
forma turi sudaryti laukai+
 - email+
- password+
- name+
- role => selectas tarp verciu: [Admin;Customer]+
2. Sukurti route register su get methodu, kuris ir išrenderins šitą formą.+
3. Sukurti route register su post methodu.
4. Register metu turi būti patikrinta: 
 email - būtinas ir email, https://laravel.com/docs/9.x/validation#rule-unique
 name - būtinas ir neilgesnis negu 256 simboliu
 password - https://laravel.com/docs/9.x/validation#validating-passwords
 role - būtinas
5. Jeigu neteisingi duomenys išveskite klaidos pranešimus.
6. Jeigu viskas ok išsaugokite vartotoją ir nukreipkite į login formą
7. Neužmirškite kaip reikia saugoti vartotojo slaptažodį: Hash::make();
 
 
EXTRA: 
Sukurti forma pakeisti slaptažodį:
 
1.
- forma turi savyje tureti laukus
  - current password -> validuoti turi ar slaptazodis toks koks buvo pries tai suvestas
  - new password -> turi validuoti ar slaptaozids 8 simboliu ilgio
  - repeated new password -> turi validuoti ar slaptazodis sutampa su pries tai buvusiu slaptazodziu
 
- sekmingai ivykus validacijai naujas slaptažodis turi būti pasaugotas ir vartotojas turi būti nukreipiamas į profile puslapį.
 
2.
- Sukurti nauja roleBasedMiddleware tik šį karta turi validuoti ar vartotojas yra Customer
- Patobulinkite sprendimą naudodamies Middleware kintamaisiais: https://laravel.com/docs/9.x/middleware#middleware-parameters
_________________________

1. Pakurkite nauja controlleri AuthorController
 
1.1. Pridekite methoda index+
 
1.2. Methodas turi grazinti visus autorius+.
1.3. Pakurkite template, kuris isvestu autoriu sarasa ir ju visa informacija, +
1.3.1 Taip pat reikia išvesti ir visas autoriaus knygas+
1.3.2 Tam naudokite surišimą one to many.+
1.4. Nepamirškite pridėti route: /authors+
 
2.1. Pridėkite papildomai methodą edit+
2.2. Edit methodas turi išvesti formos informaciją+
2.3. Sukurkite formos template, kuris turetų visus authoriaus laukus.+
2.4. Pridėkite formos validacija laukams, Laukai turi būti privalomi ir neilgesni negu 32 simboliai+
2.5. Jeigu paduoti nevalidūs duomenys išveskite klaidos pranešimus prie kiekvieno lauko+
2.6. Jeigu informacija teisinga tuomet išsaugokite informacija.+
2.7. Po išsaugojimo nukreipkite į autorių sąrašą.+
 
3.1. Pridėkite papildomai methoda delete+
3.2. Methodas delete turi patikrinti ar egzistuoja autorius ir jeigu egzistuoja reikia jį pašalinti.+
3.3. Po pakeitimo nukreipkite į autorių sąrašą.+
 
 
Papildomai!!!
 
4.1. Sukurkite likusius knygos sąryšius su kategorijomis ir su authoriais jeigu jie dar nesukurti
4.2. Sukurkite knygos create funkcija
4.3. Create formoje turi būti išvedami visi autoriai ir visos kategorijos. Perduokite į template 'categories' => Category::all(),
ir 'authors' => Author::all(),
išveskite informaciją selecte panasiai i tokia:
 
<select name="category_id">
    <option></option>
    @foreach($categories as $category)
        <option value="{{ $category->id }}">{{$category->name}}</option>
    @endforeach
</select>
 
4.4. Knygos saugojimo metu turi būti pridėtas ir autoriaus ir kategorijos objektas.
4.5. Po išsaugojimo nukreipkite knygų sąrašą.
 
5. Atlikte knygos edit funkcionalumas su category ir author prefilais.
 


__________
1. Pakurti kategorijos lentele:
category. 
- name: string
- enabled: bool
- main: bool
2. Prideti foreign key category_id prie books lenteles.
2.1. Parašykite naują migraciją, kuri pašalintų perteklinį column main.
3. Pakurti categories seed. Properciams naudokite fake
 
#4. Viska sudekit i database seed, //NESPEJOM, tai kitam kartui
 
5. Pakurkite nauja controlleri BookCategoryController
 
6. Pridekite methoda index
6.1. Methodas turi grazinti visas kategorijas.
6.2. Pakurkite template, kuris isvestu kategoriju sarasa ir ju informacija
 
7. Pridekite methoda show
7.1. show methodas turi grazinti pagal id categorija(Category::find($id)) ir taip pat visas knygas
7.2 Pakurkite template, kuris isvestu kategorija ir salia visu knygu sarasa.
 
8. Pakurkite route /categories ir /categories/{id}
 
_________________
Ta pati padarykite su authoriais:
 
3. Pakurti author seed. Properciams naudokite fake
 
#4. Viska sudekit i database seed, //NESPEJOM, tai kitam kartui
 
5. Pakurkite nauja controlleri AuthorController
 
6. Pridekite methoda index
 
6.1. Methodas turi grazinti visus autorius.
6.2. Pakurkite template, kuris isvestu autoriu sarasa ir ju visa informacija
 
7. Pridekite methoda show
7.1. show methodas turi grazinti pagal id authoriu(Author::find($id)) ir taip pat visas knygas
7.2 Pakurkite template, kuris isvestu authoriu ir salia visu knygu sarasa.
 
8. Pakurkite route /authors ir /authors/{id}

______

1. Sukurkite kontroleri ItemsController su artisan
2. Sukurkite du methodus index ir show 
3. Sukurkite 2 routus products ir products/{id}
4. products index metu išveskite masyva template
[
	[
		'id' => 1,
		'name' => "Obuolys",
		'price' => 1.29
	],
	[
		'id' => 2,
		'name' => "Bananas",
		'price' => 1,79
	],
]
5. show methodo metu išveskite template informacija:
	[
		'id' => 1,
		'name' => "Apelsinas",
		'price' => 1.59
	],
 ____
Pasileidimas iš git'o 1. pasiklonuokite projektą: 
git clone git@github.com:ednimg2/vigi-book.git 
2. nueikite i projekto kataloga: cd vigi-book 
3. paleiskite composer install composer install 
4. Šiuo metu turėtų nebūti sukurto env failo. tai reiktu pakopijuoti .env.example ir jo vietoje pakurti .env: cp .env.example .env 
5. Sugeneruokite key: php artisan key:generate 
6. Paleiskite projekta: php artisan serve

